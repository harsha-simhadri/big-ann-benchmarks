import re
import os

# the rel path to commands subdir
CDIR = "commands"

# the rel path to errors subdir
EDIR = "errors"

def remove_style_prefix(html):
    '''This function removes any style tags which get autogenerated 
       by pandas html renderer but not recognized by github markdown.'''
    regexpr = '(<style[^>]*?>[^<]*?</style>)'
    matches = re.search(regexpr, html, re.M)
    if matches:
        new_html = html[0:matches.span()[0]] + \
            html[ matches.span()[1]+1:]
        return new_html
    else:
        return html

def replace_table_with_links(html, df, ignore_algos=[]):
    '''This is a messy function but seems to work well.  It replaces table cells with appropriate 
       links by iterating the rows and cols of table and locating the cell html via regex.  It may
       be better to use BeautifulSoup and related scraping/html helper library.'''
    new_html = html
    for i in range(df.shape[0]):
        for j in range(df.shape[1]):
            row = df.iloc[i]
            col = df.columns[j] # get the column 'schema'   
            if col[1] == 'algorithm':   
                regexpr = '(<td.*class="data row%d col%d" >?)([^<]*?)(</td>)' % (i,j)
                matches = re.search(regexpr, new_html, re.M)
                if not matches and len(matches.groups())!=3: 
                    raise Exception("Cannot locate table cell")   
                track = col[0]
                algo = matches.groups()[1]
                if algo=="": continue
                if algo in ignore_algos:
                    print("WARNING: Ignoring %s" % algo)
                    continue
                link_path = os.path.join( CDIR, "%s__%s.sh" % (track, algo) )
                if not os.path.exists(link_path):
                    raise Exception("Cannot locate run path" + link_path)
                err_path = os.path.join( EDIR, "%s__%s.txt" % (track, algo) )
                if os.path.exists(err_path):
                    print("WARNING: Using error file path for %s/%s" % (track,algo))
                    link_path = err_path
                rel_link_path = os.path.join("latitude", link_path) # path is relative to markdown
                link = '<a href="' + rel_link_path + '"><div style="height:100%%;width:100%%">%s</div></a>' % algo
                # replace cell content with the linked version
                new_html = new_html[0:matches.span(2)[0]] + link + new_html[matches.span(3)[0]:]
    return new_html